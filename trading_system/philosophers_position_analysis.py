#!/usr/bin/env python3
"""
AN√ÅLISIS FILOS√ìFICO DE LA POSICI√ìN ACTUAL
¬øQu√© hubieran hecho los fil√≥sofos ayer en la noche con SOL en $198.20?
"""

import asyncio
import httpx
from datetime import datetime, timedelta
from typing import Dict, List, Tuple

class PhilosopherTradeAnalysis:
    """An√°lisis retrospectivo de decisiones filos√≥ficas"""
    
    def __init__(self):
        self.position = {
            'entry_price': 198.20,
            'size': 29.82,
            'liquidation': 152.05,
            'date': 'Ayer en la noche',
            'current_sol': None,
            'current_btc': None
        }
        self.binance_url = "https://api.binance.com/api/v3"
        
    async def get_current_prices(self):
        """Obtener precios actuales"""
        async with httpx.AsyncClient() as client:
            try:
                # SOL price
                sol_resp = await client.get(f"{self.binance_url}/ticker/price", params={"symbol": "SOLUSDT"})
                if sol_resp.status_code == 200:
                    self.position['current_sol'] = float(sol_resp.json()['price'])
                
                # BTC price
                btc_resp = await client.get(f"{self.binance_url}/ticker/price", params={"symbol": "BTCUSDT"})
                if btc_resp.status_code == 200:
                    self.position['current_btc'] = float(btc_resp.json()['price'])
                    
                # 24h stats for SOL
                sol_24h = await client.get(f"{self.binance_url}/ticker/24hr", params={"symbol": "SOLUSDT"})
                if sol_24h.status_code == 200:
                    data = sol_24h.json()
                    self.position['sol_24h_high'] = float(data['highPrice'])
                    self.position['sol_24h_low'] = float(data['lowPrice'])
                    self.position['sol_24h_change'] = float(data['priceChangePercent'])
                    
            except Exception as e:
                print(f"Error obteniendo precios: {e}")
                
    def analyze_philosopher_decisions(self) -> Dict[str, Dict]:
        """Analizar qu√© hubiera hecho cada fil√≥sofo"""
        
        philosophers = {}
        
        # Warren Buffett - El Inversor de Valor
        philosophers['Warren Buffett'] = {
            'decision': 'NO ENTRAR',
            'reasoning': [
                f"‚ùå SOL a ${self.position['entry_price']} est√° sobrevalorado",
                "üìä Prefiero esperar correcciones del 20-30%",
                "üíé El valor intr√≠nseco sugiere entrada en $150-160",
                "‚è≥ La paciencia es mi ventaja competitiva"
            ],
            'alternative': "Hubiera esperado SOL en $175 o menos",
            'philosophy': "Compra cuando hay sangre en las calles, no en euforia"
        }
        
        # George Soros - El Especulador Reflexivo
        philosophers['George Soros'] = {
            'decision': 'SHORT AGRESIVO',
            'reasoning': [
                f"üìâ ${self.position['entry_price']} es un techo claro",
                "üéØ La reflexividad del mercado indica reversi√≥n",
                "üí∞ Hubiera abierto SHORT con 2x leverage",
                "üîÑ Los extremos siempre revierten"
            ],
            'alternative': f"SHORT desde $198 con target $180",
            'philosophy': "El mercado siempre exagera, aprovecha los extremos"
        }
        
        # Jesse Livermore - El Especulador Legendario
        philosophers['Jesse Livermore'] = {
            'decision': 'ESPERAR CONFIRMACI√ìN',
            'reasoning': [
                "üìà No compro en resistencias, espero breakouts",
                f"‚ö†Ô∏è ${self.position['entry_price']} es zona de distribuci√≥n",
                "üéØ Esperar√≠a ruptura de $200 con volumen",
                "‚ùå Sin confirmaci√≥n, no hay posici√≥n"
            ],
            'alternative': "Entrada solo si rompe $200 con volumen alto",
            'philosophy': "El mercado nunca est√° equivocado, las opiniones s√≠"
        }
        
        # Paul Tudor Jones - El Macro Trader
        philosophers['Paul Tudor Jones'] = {
            'decision': 'HEDGE CON PUTS',
            'reasoning': [
                "‚öñÔ∏è Riesgo/Recompensa desfavorable en $198",
                "üõ°Ô∏è Comprar√≠a PUTs para proteger",
                "üìä RSI sobrecalentado sugiere correcci√≥n",
                "üí° Mejor esperar retroceso a MA50"
            ],
            'alternative': "Long solo en $180 con stop en $175",
            'philosophy': "Protege primero, gana despu√©s"
        }
        
        # Ray Dalio - El Sistematizador
        philosophers['Ray Dalio'] = {
            'decision': 'NO TRADE - FUERA DEL SISTEMA',
            'reasoning': [
                "ü§ñ Mis algoritmos no dan se√±al en $198",
                "üìê La correlaci√≥n BTC/SOL est√° rota",
                "‚ö†Ô∏è Volatilidad excesiva para el modelo",
                "üéØ Esperar√≠a se√±al clara del sistema"
            ],
            'alternative': "Solo 2% del portfolio, nunca all-in",
            'philosophy': "Los principios y sistemas vencen a las emociones"
        }
        
        # Benjamin Graham - El Padre del Value Investing
        philosophers['Benjamin Graham'] = {
            'decision': 'ABSOLUTAMENTE NO',
            'reasoning': [
                "üìö Sin fundamentos que justifiquen $198",
                "‚ö†Ô∏è Margen de seguridad: CERO",
                "üí∞ Precio justo m√°ximo: $140",
                "üö´ Esto es especulaci√≥n, no inversi√≥n"
            ],
            'alternative': "Bonos del tesoro al 5% antes que crypto a estos precios",
            'philosophy': "El inversor inteligente nunca especula"
        }
        
        # Satoshi Nakamoto - El Cypherpunk (Bonus)
        philosophers['Satoshi Nakamoto'] = {
            'decision': 'HOLD BTC, IGNORAR ALTS',
            'reasoning': [
                "‚Çø Solo Bitcoin importa largo plazo",
                "üîí SOL es centralizado, no es crypto real",
                "üíé HODLear BTC, no tradear shitcoins",
                "üåê La descentralizaci√≥n > ganancias corto plazo"
            ],
            'alternative': "Acumular BTC en dips, ignorar el ruido",
            'philosophy': "No conf√≠es, verifica. Bitcoin, no shitcoins"
        }
        
        return philosophers
    
    def calculate_consensus(self, philosophers: Dict) -> Dict:
        """Calcular consenso filos√≥fico"""
        decisions = {
            'NO ENTRAR': 0,
            'SHORT': 0,
            'ESPERAR': 0,
            'HEDGE': 0
        }
        
        for phil, data in philosophers.items():
            if 'NO' in data['decision'] or 'ABSOLUTAMENTE NO' in data['decision']:
                decisions['NO ENTRAR'] += 1
            elif 'SHORT' in data['decision']:
                decisions['SHORT'] += 1
            elif 'ESPERAR' in data['decision'] or 'HEDGE' in data['decision']:
                decisions['ESPERAR'] += 1
                
        total = sum(decisions.values())
        consensus = {
            'resultado': max(decisions, key=decisions.get),
            'votos': decisions,
            'porcentaje_no_entrada': (decisions['NO ENTRAR'] / total * 100) if total > 0 else 0,
            'unanimidad': total == decisions[max(decisions, key=decisions.get)]
        }
        
        return consensus
    
    async def generate_report(self):
        """Generar reporte completo"""
        await self.get_current_prices()
        
        print("\n" + "="*80)
        print("üé≠ AN√ÅLISIS FILOS√ìFICO - ¬øQU√â HUBIERAN HECHO AYER?")
        print("="*80)
        
        print(f"\nüìç SITUACI√ìN:")
        print(f"   Entrada propuesta: ${self.position['entry_price']}")
        print(f"   Precio actual SOL: ${self.position['current_sol']:.2f}")
        print(f"   P&L actual: ${(self.position['current_sol'] - self.position['entry_price']) * self.position['size']:.2f}")
        print(f"   Cambio 24h: {self.position.get('sol_24h_change', 0):.2f}%")
        
        philosophers = self.analyze_philosopher_decisions()
        
        print("\nüß† DECISIONES FILOS√ìFICAS:")
        print("-" * 80)
        
        for name, analysis in philosophers.items():
            print(f"\nüë§ {name}")
            print(f"   Decisi√≥n: {analysis['decision']}")
            print(f"   Filosof√≠a: \"{analysis['philosophy']}\"")
            print("   Razonamiento:")
            for reason in analysis['reasoning']:
                print(f"      {reason}")
            print(f"   Alternativa: {analysis['alternative']}")
        
        # Consenso
        consensus = self.calculate_consensus(philosophers)
        
        print("\n" + "="*80)
        print("üìä CONSENSO FILOS√ìFICO:")
        print("-" * 80)
        print(f"   üèÜ Decisi√≥n mayoritaria: {consensus['resultado']}")
        print(f"   üìà Distribuci√≥n de votos:")
        for decision, votes in consensus['votos'].items():
            print(f"      {decision}: {votes} votos")
        print(f"   ‚ö†Ô∏è {consensus['porcentaje_no_entrada']:.1f}% NO hubieran entrado")
        
        # Lecciones
        print("\n" + "="*80)
        print("üí° LECCIONES CLAVE:")
        print("-" * 80)
        print("   1. La PACIENCIA es una estrategia")
        print("   2. NUNCA entrar en resistencias sin confirmaci√≥n")
        print("   3. El FOMO es el enemigo #1 del trader")
        print("   4. Mejor perder oportunidad que perder capital")
        print("   5. Los mejores trades son los que NO haces en mal momento")
        
        # Recomendaci√≥n actual
        if self.position['current_sol']:
            pnl = (self.position['current_sol'] - self.position['entry_price']) * self.position['size']
            pnl_percent = ((self.position['current_sol'] - self.position['entry_price']) / self.position['entry_price']) * 100
            
            print("\n" + "="*80)
            print("üéØ RECOMENDACI√ìN ACTUAL BASADA EN FILOSOF√çAS:")
            print("-" * 80)
            
            if pnl < 0:
                print(f"   üìâ Est√°s en p√©rdida: ${pnl:.2f} ({pnl_percent:.2f}%)")
                print("   üíé Warren Buffett dice: 'El mercado es un mecanismo de transferencia'")
                print("   üéØ Soros sugiere: 'Cuando est√°s equivocado, sal r√°pido'")
                print("   ‚è≥ Livermore advierte: 'Nunca promedies p√©rdidas'")
                print("\n   CONSENSO: Esperar rebote a $192-194 para salir con menor p√©rdida")
            else:
                print(f"   üìà Est√°s en ganancia: ${pnl:.2f} ({pnl_percent:.2f}%)")
                print("   üéØ Tudor Jones dice: 'Protege las ganancias'")
                print("   üí∞ Livermore sugiere: 'Deja correr las ganancias'")
                print("\n   CONSENSO: Poner stop en breakeven y dejar correr")
        
        print("\n" + "="*80)
        print("üîÆ PREDICCI√ìN FILOS√ìFICA PR√ìXIMAS 24H:")
        print("-" * 80)
        print("   ‚Ä¢ Buffett: 'SOL probablemente a $185'")
        print("   ‚Ä¢ Soros: 'Rebote t√©cnico a $192, luego ca√≠da'")
        print("   ‚Ä¢ Livermore: 'El tape no miente, sigue la tendencia'")
        print("   ‚Ä¢ Dalio: 'La correlaci√≥n con BTC mandar√°'")
        print("\n" + "="*80)
        
async def main():
    analyzer = PhilosopherTradeAnalysis()
    await analyzer.generate_report()

if __name__ == "__main__":
    asyncio.run(main())