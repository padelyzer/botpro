#!/usr/bin/env python3
"""
SHOW CURRENT SIGNALS - Muestra todas las se√±ales actuales del mercado
"""

import asyncio
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.columns import Columns

from binance_integration import BinanceConnector
from multi_timeframe_signal_detector import PatternDetector, TRADING_PAIRS, TIMEFRAMES

console = Console()

async def get_all_current_signals():
    """Obtiene todas las se√±ales actuales del mercado"""
    
    connector = BinanceConnector(testnet=False)
    detector = PatternDetector()
    
    all_signals = []
    
    # Escanear todos los pares
    for symbol in TRADING_PAIRS:
        for timeframe in TIMEFRAMES.keys():
            try:
                df = connector.get_historical_data(symbol, timeframe, limit=100)
                
                if not df.empty and len(df) >= 50:
                    signals = detector.detect_all_patterns(df, symbol, timeframe)
                    
                    # Filtrar se√±ales con confianza m√≠nima de 60%
                    for signal in signals:
                        if signal.confidence >= 60:
                            all_signals.append(signal)
                            
            except Exception as e:
                pass
    
    return all_signals

async def display_signals():
    """Muestra las se√±ales de forma organizada"""
    
    console.print(Panel(
        "[bold cyan]ü§ñ BotphIA - Se√±ales Actuales del Mercado[/bold cyan]\n" +
        f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        expand=False
    ))
    
    console.print("\n[yellow]Escaneando todos los pares...[/yellow]\n")
    
    signals = await get_all_current_signals()
    
    if not signals:
        console.print("[red]No se encontraron se√±ales[/red]")
        return
    
    # Separar por stage
    confirmed = [s for s in signals if s.stage.value == "confirmed"]
    nearly = [s for s in signals if s.stage.value == "nearly"]
    forming = [s for s in signals if s.stage.value == "forming"]
    
    # SE√ëALES CONFIRMADAS
    if confirmed:
        console.print("\n[bold green]‚úÖ SE√ëALES CONFIRMADAS - EJECUTAR AHORA[/bold green]")
        console.print("[green]Estas se√±ales est√°n listas para entrada inmediata[/green]\n")
        
        for sig in confirmed:
            action = "üü¢ COMPRA" if "bottom" in sig.pattern_type.value or "support" in sig.pattern_type.value or "breakout" in sig.pattern_type.value else "üî¥ VENTA"
            
            panel = Panel(
                f"[bold]{sig.symbol}[/bold] - {sig.timeframe}\n"
                f"Patr√≥n: [yellow]{sig.pattern_type.value}[/yellow]\n"
                f"Confianza: [green]{sig.confidence:.1f}%[/green]\n"
                f"\n{action}\n"
                f"Entry: [bold]${sig.entry_price:.4f}[/bold]\n"
                f"Stop Loss: ${sig.stop_loss:.4f}\n"
                f"Take Profit 1: ${sig.take_profit_1:.4f}\n"
                f"Take Profit 2: ${sig.take_profit_2:.4f}\n"
                f"Risk/Reward: {sig.risk_reward_ratio:.2f}:1",
                title=f"[bold green]CONFIRMADA[/bold green]",
                border_style="green"
            )
            console.print(panel)
    
    # SE√ëALES CASI COMPLETAS
    if nearly:
        console.print("\n[bold yellow]‚è∞ SE√ëALES CASI COMPLETAS - PREPARAR ORDEN[/bold yellow]")
        console.print("[yellow]Estas se√±ales est√°n a punto de confirmarse[/yellow]\n")
        
        table = Table(show_lines=True)
        table.add_column("Par", style="cyan", width=10)
        table.add_column("TF", justify="center", width=5)
        table.add_column("Patr√≥n", style="yellow", width=20)
        table.add_column("Conf %", justify="right", width=8)
        table.add_column("Entry", justify="right", width=12)
        table.add_column("Stop Loss", justify="right", width=12)
        table.add_column("TP1", justify="right", width=12)
        table.add_column("R:R", justify="center", width=6)
        
        for sig in nearly:
            table.add_row(
                sig.symbol,
                sig.timeframe,
                sig.pattern_type.value,
                f"{sig.confidence:.1f}%",
                f"${sig.entry_price:.4f}",
                f"${sig.stop_loss:.4f}",
                f"${sig.take_profit_1:.4f}",
                f"{sig.risk_reward_ratio:.2f}:1"
            )
        
        console.print(table)
    
    # SE√ëALES FORM√ÅNDOSE
    if forming:
        console.print("\n[bold cyan]üìà SE√ëALES FORM√ÅNDOSE - MONITOREAR[/bold cyan]")
        console.print("[cyan]Estas se√±ales est√°n en desarrollo[/cyan]\n")
        
        table = Table(show_lines=False)
        table.add_column("Par", style="cyan")
        table.add_column("TF", justify="center")
        table.add_column("Patr√≥n", style="dim")
        table.add_column("Conf %", justify="right")
        
        for sig in forming[:10]:  # Solo mostrar las primeras 10
            table.add_row(
                sig.symbol,
                sig.timeframe,
                sig.pattern_type.value,
                f"{sig.confidence:.1f}%"
            )
        
        console.print(table)
    
    # RESUMEN
    console.print("\n" + "="*60)
    console.print("[bold]üìä RESUMEN[/bold]")
    console.print("="*60)
    console.print(f"Total se√±ales detectadas: [bold]{len(signals)}[/bold]")
    console.print(f"  ‚Ä¢ Confirmadas: [green]{len(confirmed)}[/green]")
    console.print(f"  ‚Ä¢ Casi completas: [yellow]{len(nearly)}[/yellow]")
    console.print(f"  ‚Ä¢ Form√°ndose: [cyan]{len(forming)}[/cyan]")
    
    # Top pares con se√±ales
    pairs_count = {}
    for sig in signals:
        if sig.symbol not in pairs_count:
            pairs_count[sig.symbol] = 0
        pairs_count[sig.symbol] += 1
    
    if pairs_count:
        console.print("\n[bold]üèÜ Pares m√°s activos:[/bold]")
        sorted_pairs = sorted(pairs_count.items(), key=lambda x: x[1], reverse=True)
        for pair, count in sorted_pairs[:5]:
            console.print(f"  ‚Ä¢ {pair}: {count} se√±ales")

if __name__ == "__main__":
    asyncio.run(display_signals())